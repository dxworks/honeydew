name: End to End test

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]

    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - if: matrix.os == 'windows-latest'
        name: Release for Windows
        run: |
          mkdir bin
          dotnet publish -r win-x64 --self-contained true -p:PublishSingleFile=true -o bin -c Release Honeydew/Honeydew.csproj

      - if: matrix.os == 'ubuntu-latest'
        name: Release for Ubuntu
        run: |
          mkdir bin
          dotnet publish -r linux-x64 --self-contained true -p:PublishSingleFile=true -o bin -c Release Honeydew/Honeydew.csproj

      - if: matrix.os == 'macos-latest'
        name: Release for MacOS
        run: |
          mkdir bin
          dotnet publish -r osx-x64 --self-contained true -p:PublishSingleFile=true -o bin -c Release Honeydew/Honeydew.csproj


      - name: Checkout Test Project
        uses: actions/checkout@v2
        with:
          repository: dxworks/HoneydewTestProject
          path: test_folder

      - name: Run Honeydew
        run: ./bin/Honeydew extract test_folder

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '15'
          java-package: 'jdk'

      - if: matrix.os == 'windows-latest'
        name: Download comparer
        run: Invoke-WebRequest -Uri ${{ secrets.FILE_COMPARER_PATH }} -OutFile "./filecomparer.jar"

      - if: matrix.os != 'windows-latest'
        name: Download comparer
        run: wget ${{ secrets.FILE_COMPARER_PATH }} -O "./filecomparer.jar"

      - name: Compare results
        run: sh e2e_scripts/compare.sh e2e_results ./results

      - if: matrix.os == 'windows-latest'
        name: Prepare Results zip
        run: powershell Compress-Archive results results.zip

      - if: matrix.os != 'windows-latest'
        name: Prepare Results zip
        run: zip -r results.zip results

      - name: Upload results artifact
        uses: actions/upload-artifact@v4
        with:
          name: results-${{matrix.os}}
          path: results.zip
